// Code generated by goctl. DO NOT EDIT.
// Source: msg_rpc.proto

package msg

import (
	"context"

	"msg/app/msg-web/msg_rpc/pb/msg_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchSendRequest = msg_rpc.BatchSendRequest
	MessageParam     = msg_rpc.MessageParam
	PingRequest      = msg_rpc.PingRequest
	PingResponse     = msg_rpc.PingResponse
	SendRequest      = msg_rpc.SendRequest
	SendResponse     = msg_rpc.SendResponse

	Msg interface {
		Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
		BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*SendResponse, error)
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	}

	defaultMsg struct {
		cli zrpc.Client
	}
)

func NewMsg(cli zrpc.Client) Msg {
	return &defaultMsg{
		cli: cli,
	}
}

func (m *defaultMsg) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	client := msg_rpc.NewMsgClient(m.cli.Conn())
	return client.Send(ctx, in, opts...)
}

func (m *defaultMsg) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	client := msg_rpc.NewMsgClient(m.cli.Conn())
	return client.BatchSend(ctx, in, opts...)
}

func (m *defaultMsg) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := msg_rpc.NewMsgClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
