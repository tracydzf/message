// Code generated by goctl. DO NOT EDIT.
// Source: msg_rpc.proto

package server

import (
	"context"

	"msg/app/msg-web/msg_rpc/internal/logic"
	"msg/app/msg-web/msg_rpc/internal/svc"
	"msg/app/msg-web/msg_rpc/pb/msg_rpc"
)

type MsgServer struct {
	svcCtx *svc.ServiceContext
	msg_rpc.UnimplementedMsgServer
}

func NewMsgServer(svcCtx *svc.ServiceContext) *MsgServer {
	return &MsgServer{
		svcCtx: svcCtx,
	}
}

func (s *MsgServer) Send(ctx context.Context, in *msg_rpc.SendRequest) (*msg_rpc.SendResponse, error) {
	l := logic.NewSendLogic(ctx, s.svcCtx)
	return l.Send(in)
}

func (s *MsgServer) BatchSend(ctx context.Context, in *msg_rpc.BatchSendRequest) (*msg_rpc.SendResponse, error) {
	l := logic.NewBatchSendLogic(ctx, s.svcCtx)
	return l.BatchSend(in)
}

func (s *MsgServer) Ping(ctx context.Context, in *msg_rpc.PingRequest) (*msg_rpc.PingResponse, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}
